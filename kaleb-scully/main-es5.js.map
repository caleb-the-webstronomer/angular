{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/kaleb.module.ts","webpack:///src/app/kaleb.ts.Kaleb.html","webpack:///src/app/kaleb.routing.ts","webpack:///src/app/kaleb.ts","webpack:///src/app/store/kaleb.actions.ts","webpack:///src/app/store/kaleb.state.ts","webpack:///src/app/znippets/material.ts","webpack:///src/app/znippets/widgets/themer/themer.html","webpack:///src/app/znippets/widgets/themer/themer.ts","webpack:///src/app/znippets/znippets.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","webpackAsyncContextKeys","Object","module","exports","KalebModule","routes","path","loadChildren","KalebRouting","Kaleb","getTheme","ChangeTheme","theme","type","defx","KalebState","ctx","action","state","getState","setState","name","defaults","Mat","Themer","store","dispatch","themesel","modules","components","Znippets","environment","production","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["var map = {\n\t\"./modules/landing/landing.ngfactory\": [\n\t\t\"./src/app/modules/landing/landing.ngfactory.js\",\n\t\t\"modules-landing-landing-ngfactory\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","// MODULES\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { KalebRouting } from \"./kaleb.routing\";\nimport { Znippets } from \"./znippets/znippets\";\nimport { ScullyLibModule } from \"@scullyio/ng-lib\";\n// NGXS STORE\nimport { NgxsModule } from \"@ngxs/store\";\nimport { NgxsStoragePluginModule } from \"@ngxs/storage-plugin\";\nimport { NgxsReduxDevtoolsPluginModule } from \"@ngxs/devtools-plugin\";\nimport { NgxsSelectSnapshotModule } from \"@ngxs-labs/select-snapshot\";\nimport { KalebState } from \"./store/kaleb.state\";\n// COMPONENTS\nimport { Kaleb } from \"./kaleb\";\n\n@NgModule({\n  declarations: [Kaleb],\n  imports: [\n    BrowserModule,\n    KalebRouting,\n    Znippets,\n    NgxsModule.forRoot([KalebState]),\n    NgxsStoragePluginModule.forRoot({\n      key: [\"kalebstate\"],\n    }),\n    NgxsReduxDevtoolsPluginModule.forRoot(),\n    NgxsSelectSnapshotModule.forRoot(),\n    ScullyLibModule,\n  ],\n  providers: [],\n  bootstrap: [Kaleb],\n})\nexport class KalebModule {}\n","\n    <div [class]=\"theme$ | async\">\n      <div class=\"container\">\n        <themer></themer>\n        <router-outlet> </router-outlet>\n      </div>\n    </div>\n  ","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule, PreloadAllModules } from \"@angular/router\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    loadChildren: \"./modules/landing/landing#Landing\",\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      preloadingStrategy: PreloadAllModules,\n      scrollPositionRestoration: \"enabled\",\n      anchorScrolling: \"enabled\",\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class KalebRouting {}\n","import { Component } from \"@angular/core\";\nimport { Select } from \"@ngxs/store\";\nimport { KalebState } from \"./store/kaleb.state\";\n\n@Component({\n  selector: \"kaleb\",\n  template: `\n    <div [class]=\"theme$ | async\">\n      <div class=\"container\">\n        <themer></themer>\n        <router-outlet> </router-outlet>\n      </div>\n    </div>\n  `,\n  styles: [\"\"],\n})\nexport class Kaleb {\n  @Select(KalebState.getTheme) theme$;\n\n  constructor() {}\n}\n","export class ChangeTheme {\n  static readonly type = \"[Theme] ChangeTheme\";\n  constructor(public theme: string) {}\n}\n","import { State, Action, StateContext, Selector } from \"@ngxs/store\";\nimport { Injectable } from \"@angular/core\";\n\nimport * as actions from \"./kaleb.actions\";\n\nexport interface KalebFace {\n  theme: string;\n}\n\nlet defx = {\n  theme: \"light-theme\",\n};\n\n@State<KalebFace>({\n  name: \"kalebstate\",\n  defaults: defx,\n})\n@Injectable()\nexport class KalebState {\n  /* ********************\n    S E L E C T O R S\n  ********************* */\n\n  @Selector()\n  static getTheme(state: KalebFace) {\n    return state.theme;\n  }\n\n  /* **************************\n         A C T I O N S\n  *************************** */\n\n  @Action(actions.ChangeTheme)\n  ChangeTheme(ctx: StateContext<KalebFace>, action: actions.ChangeTheme) {\n    const state = ctx.getState();\n    ctx.setState({\n      ...state,\n      theme: action.theme,\n    });\n  }\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatButtonToggleModule } from \"@angular/material/button-toggle\";\nimport { MatSidenavModule } from \"@angular/material/sidenav\";\nimport { MatListModule } from \"@angular/material/list\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatRadioModule } from \"@angular/material/radio\";\n\n@NgModule({\n  exports: [\n    MatCardModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatSidenavModule,\n    MatListModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatRadioModule,\n  ],\n})\nexport class Mat {}\n","<div class=\"switch\">\n    <mat-button-toggle-group [(ngModel)]=\"themesel\" (change)=\"changer()\">\n        <mat-button-toggle class=\"buttt\" value=\"dark-theme\">Dark</mat-button-toggle>\n        <mat-button-toggle class=\"buttt\" value=\"light-theme\">Light</mat-button-toggle>\n    </mat-button-toggle-group>\n</div>","import { Component } from \"@angular/core\";\nimport { Store } from \"@ngxs/store\";\nimport { ChangeTheme } from \"../../../store/kaleb.actions\";\n\n@Component({\n  selector: \"themer\",\n  templateUrl: \"./themer.html\",\n  styleUrls: [\"./themer.scss\"],\n})\nexport class Themer {\n  themesel: string;\n\n  constructor(private store: Store) {}\n\n  changer() {\n    this.store.dispatch(new ChangeTheme(this.themesel));\n  }\n}\n","// MODULES\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { Mat } from \"./material\";\nimport { FormsModule } from \"@angular/forms\";\n\n// WIDGETS\nimport { Themer } from \"./widgets/themer/themer\";\n\nconst modules = [CommonModule, Mat, FormsModule];\n\nconst components = [Themer];\n\n@NgModule({\n  declarations: [...components],\n  imports: [...modules],\n  exports: [...components],\n})\nexport class Znippets {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from \"@angular/core\";\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\nimport { environment } from \"./environments/environment\";\nimport { KalebModule } from \"./app/kaleb.module\";\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(KalebModule)\n  .catch((err) => console.error(err));\n"]}