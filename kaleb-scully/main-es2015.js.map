{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/kaleb.module.ts","./src/app/kaleb.ts.Kaleb.html","./src/app/kaleb.routing.ts","./src/app/kaleb.ts","./src/app/store/kaleb.actions.ts","./src/app/store/kaleb.state.ts","./src/app/znippets/material.ts","./src/app/znippets/widgets/themer/themer.html","./src/app/znippets/widgets/themer/themer.ts","./src/app/znippets/znippets.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACQA;AAAA;AAAO,MAAM,WAAW;CAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2FC/BvB,wIAA8B,IAAzB,sLAAwB,KAC3B,6IAAuB,KACrB,qfAAQ,IACR,8lBAAe,mDAHd,oJAAwB,WAA7B,YAA8B,EAAzB,SAAwB;;;;;;;;;;;;;;;;ACEjC;AAAA;AAAA,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,YAAY,EAAE,mCAAmC;KAClD;CACF,CAAC;AAYK,MAAM,YAAY;CAAG;;;;;;;;;;;;;;;;;;;ACnBS;AACY;AAc1C,MAAM,KAAK;IAGhB,gBAAe,CAAC;CACjB;AAH8B;IAA5B,0DAAM,CAAC,6DAAU,CAAC,QAAQ,CAAC;qCAAQ;;;;;;;;;;;;;ACjBtC;AAAA;AAAO,MAAM,WAAW;IAEtB,YAAmB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;;AADpB,gBAAI,GAAG,qBAAqB,CAAC;;;;;;;;;;;;;;;;;;;ACDqB;AAGzB;AAM3C,IAAI,IAAI,GAAG;IACT,KAAK,EAAE,aAAa;CACrB,CAAC;AAOF,IAAa,UAAU,GAAvB,MAAa,UAAU;IACrB;;4BAEwB;IAGxB,MAAM,CAAC,QAAQ,CAAC,KAAgB;QAC9B,OAAO,KAAK,CAAC,KAAK,CAAC;IACrB,CAAC;IAED;;kCAE8B;IAG9B,WAAW,CAAC,GAA4B,EAAE,MAA2B;QACnE,MAAM,KAAK,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC7B,GAAG,CAAC,QAAQ,iCACP,KAAK,KACR,KAAK,EAAE,MAAM,CAAC,KAAK,IACnB,CAAC;IACL,CAAC;CACF;AAPC;IADC,0DAAM,CAAC,0DAAmB,CAAC;6CAO3B;AAfD;IADC,4DAAQ,EAAE;gCAGV;AARU,UAAU;IALtB,yDAAK,CAAY;QAChB,IAAI,EAAE,YAAY;QAClB,QAAQ,EAAE,IAAI;KACf,CAAC;GAEW,UAAU,CAsBtB;AAtBsB;;;;;;;;;;;;;ACKvB;AAAA;AAAO,MAAM,GAAG;CAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4FCvBnB,2IAAoB,KAChB,ujBAAqE,YAA5C;;wBAAsB;MAAC;;wBAAoB;MAApE,goDAAqE,IACjE;;;y0BAAoD,6EAAI,MACxD;;;y0BAAqD,8EAAK,mDAF9D,YAAqE,GAA5C,oBAAsB,WAA/C,YAAqE,EAA5C,UAAsB,GACV,6BAAkB,EAAnD,aAAoD,EAAnB,UAAkB,GAClB,8BAAmB,EAApD,aAAqD,EAApB,UAAmB,2BAFxD,8/BAAqE,GACjE,qlBAAoD,GACpD,slBAAqD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACD7D;AAAA;AAAA;AAA2D;AAOpD,MAAM,MAAM;IAGjB,YAAoB,KAAY;QAAZ,UAAK,GAAL,KAAK,CAAO;IAAG,CAAC;IAEpC,OAAO;QACL,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,gEAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtD,CAAC;CACF;;;;;;;;;;;;;ACfD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACd;AACY;AAE7C,UAAU;AACuC;AAEjD,MAAM,OAAO,GAAG,CAAC,4DAAY,EAAE,6CAAG,EAAE,0DAAW,CAAC,CAAC;AAEjD,MAAM,UAAU,GAAG,CAAC,6DAAM,CAAC,CAAC;AAOrB,MAAM,QAAQ;CAAG;;;;;;;;;;;;;AClBxB;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAGU;;;AAGzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,uBACN,CAAC,iFAAY;KAC5B,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["var map = {\n\t\"./modules/landing/landing.ngfactory\": [\n\t\t\"./src/app/modules/landing/landing.ngfactory.js\",\n\t\t\"modules-landing-landing-ngfactory\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";\nmodule.exports = webpackAsyncContext;","// MODULES\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { KalebRouting } from \"./kaleb.routing\";\nimport { Znippets } from \"./znippets/znippets\";\nimport { ScullyLibModule } from \"@scullyio/ng-lib\";\n// NGXS STORE\nimport { NgxsModule } from \"@ngxs/store\";\nimport { NgxsStoragePluginModule } from \"@ngxs/storage-plugin\";\nimport { NgxsReduxDevtoolsPluginModule } from \"@ngxs/devtools-plugin\";\nimport { NgxsSelectSnapshotModule } from \"@ngxs-labs/select-snapshot\";\nimport { KalebState } from \"./store/kaleb.state\";\n// COMPONENTS\nimport { Kaleb } from \"./kaleb\";\n\n@NgModule({\n  declarations: [Kaleb],\n  imports: [\n    BrowserModule,\n    KalebRouting,\n    Znippets,\n    NgxsModule.forRoot([KalebState]),\n    NgxsStoragePluginModule.forRoot({\n      key: [\"kalebstate\"],\n    }),\n    NgxsReduxDevtoolsPluginModule.forRoot(),\n    NgxsSelectSnapshotModule.forRoot(),\n    ScullyLibModule,\n  ],\n  providers: [],\n  bootstrap: [Kaleb],\n})\nexport class KalebModule {}\n","\n    <div [class]=\"theme$ | async\">\n      <div class=\"container\">\n        <themer></themer>\n        <router-outlet> </router-outlet>\n      </div>\n    </div>\n  ","import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule, PreloadAllModules } from \"@angular/router\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    loadChildren: \"./modules/landing/landing#Landing\",\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      preloadingStrategy: PreloadAllModules,\n      scrollPositionRestoration: \"enabled\",\n      anchorScrolling: \"enabled\",\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class KalebRouting {}\n","import { Component } from \"@angular/core\";\nimport { Select } from \"@ngxs/store\";\nimport { KalebState } from \"./store/kaleb.state\";\n\n@Component({\n  selector: \"kaleb\",\n  template: `\n    <div [class]=\"theme$ | async\">\n      <div class=\"container\">\n        <themer></themer>\n        <router-outlet> </router-outlet>\n      </div>\n    </div>\n  `,\n  styles: [\"\"],\n})\nexport class Kaleb {\n  @Select(KalebState.getTheme) theme$;\n\n  constructor() {}\n}\n","export class ChangeTheme {\n  static readonly type = \"[Theme] ChangeTheme\";\n  constructor(public theme: string) {}\n}\n","import { State, Action, StateContext, Selector } from \"@ngxs/store\";\nimport { Injectable } from \"@angular/core\";\n\nimport * as actions from \"./kaleb.actions\";\n\nexport interface KalebFace {\n  theme: string;\n}\n\nlet defx = {\n  theme: \"light-theme\",\n};\n\n@State<KalebFace>({\n  name: \"kalebstate\",\n  defaults: defx,\n})\n@Injectable()\nexport class KalebState {\n  /* ********************\n    S E L E C T O R S\n  ********************* */\n\n  @Selector()\n  static getTheme(state: KalebFace) {\n    return state.theme;\n  }\n\n  /* **************************\n         A C T I O N S\n  *************************** */\n\n  @Action(actions.ChangeTheme)\n  ChangeTheme(ctx: StateContext<KalebFace>, action: actions.ChangeTheme) {\n    const state = ctx.getState();\n    ctx.setState({\n      ...state,\n      theme: action.theme,\n    });\n  }\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatButtonToggleModule } from \"@angular/material/button-toggle\";\nimport { MatSidenavModule } from \"@angular/material/sidenav\";\nimport { MatListModule } from \"@angular/material/list\";\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatRadioModule } from \"@angular/material/radio\";\n\n@NgModule({\n  exports: [\n    MatCardModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatSidenavModule,\n    MatListModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatRadioModule,\n  ],\n})\nexport class Mat {}\n","<div class=\"switch\">\n    <mat-button-toggle-group [(ngModel)]=\"themesel\" (change)=\"changer()\">\n        <mat-button-toggle class=\"buttt\" value=\"dark-theme\">Dark</mat-button-toggle>\n        <mat-button-toggle class=\"buttt\" value=\"light-theme\">Light</mat-button-toggle>\n    </mat-button-toggle-group>\n</div>","import { Component } from \"@angular/core\";\nimport { Store } from \"@ngxs/store\";\nimport { ChangeTheme } from \"../../../store/kaleb.actions\";\n\n@Component({\n  selector: \"themer\",\n  templateUrl: \"./themer.html\",\n  styleUrls: [\"./themer.scss\"],\n})\nexport class Themer {\n  themesel: string;\n\n  constructor(private store: Store) {}\n\n  changer() {\n    this.store.dispatch(new ChangeTheme(this.themesel));\n  }\n}\n","// MODULES\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { Mat } from \"./material\";\nimport { FormsModule } from \"@angular/forms\";\n\n// WIDGETS\nimport { Themer } from \"./widgets/themer/themer\";\n\nconst modules = [CommonModule, Mat, FormsModule];\n\nconst components = [Themer];\n\n@NgModule({\n  declarations: [...components],\n  imports: [...modules],\n  exports: [...components],\n})\nexport class Znippets {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from \"@angular/core\";\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\n\nimport { environment } from \"./environments/environment\";\nimport { KalebModule } from \"./app/kaleb.module\";\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(KalebModule)\n  .catch((err) => console.error(err));\n"],"sourceRoot":"webpack:///"}